
SPI_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000594  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a0  080006a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080006a8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080006ac  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000024  080006ac  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000012da  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000385  00000000  00000000  00021307  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000f8  00000000  00000000  00021690  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00021788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000739  00000000  00000000  00021848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000567  00000000  00000000  00021f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000224e8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000264  00000000  00000000  00022564  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000227c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000688 	.word	0x08000688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000688 	.word	0x08000688

0800014c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	 *
	 *                  TIMER2 SETUP
	 *
	 * ************************************************************/
	/*Enables the clock in the ADC1 and in the port C*/
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000150:	4a58      	ldr	r2, [pc, #352]	; (80002b4 <main+0x168>)
 8000152:	4b58      	ldr	r3, [pc, #352]	; (80002b4 <main+0x168>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	f043 0311 	orr.w	r3, r3, #17
 800015a:	6193      	str	r3, [r2, #24]
	/*Enables the TIM2*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800015c:	4a55      	ldr	r2, [pc, #340]	; (80002b4 <main+0x168>)
 800015e:	4b55      	ldr	r3, [pc, #340]	; (80002b4 <main+0x168>)
 8000160:	69db      	ldr	r3, [r3, #28]
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	61d3      	str	r3, [r2, #28]
	/* Preload value to counter*/
	TIM2->ARR = 0X0FFF;
 8000168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800016c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000170:	859a      	strh	r2, [r3, #44]	; 0x2c
	/*the value to preescaler*/
	TIM2->PSC = 0X0FFF;
 8000172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000176:	f640 72ff 	movw	r2, #4095	; 0xfff
 800017a:	851a      	strh	r2, [r3, #40]	; 0x28
	/*Enables the interrupt when update occurs*/
	TIM2->DIER |= TIM_DIER_UIE;
 800017c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000184:	899b      	ldrh	r3, [r3, #12]
 8000186:	b29b      	uxth	r3, r3
 8000188:	f043 0301 	orr.w	r3, r3, #1
 800018c:	b29b      	uxth	r3, r3
 800018e:	8193      	strh	r3, [r2, #12]
	/*Enables interrupt to TIM2*/
	NVIC->ISER[0] = NVIC_ISER_SETENA_28;
 8000190:	4b49      	ldr	r3, [pc, #292]	; (80002b8 <main+0x16c>)
 8000192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000196:	601a      	str	r2, [r3, #0]
	/*Enables counter*/
	TIM2->CR1 |= TIM_CR1_CEN;
 8000198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800019c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	8013      	strh	r3, [r2, #0]
	/*Pin13 PortC output pull down*/
	GPIOC->CRH |= GPIO_CRH_MODE13_0 | GPIO_CRH_MODE14 | GPIO_CRH_MODE15;
 80001ac:	4a43      	ldr	r2, [pc, #268]	; (80002bc <main+0x170>)
 80001ae:	4b43      	ldr	r3, [pc, #268]	; (80002bc <main+0x170>)
 80001b0:	685b      	ldr	r3, [r3, #4]
 80001b2:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 80001b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001ba:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF13_0;
 80001bc:	4a3f      	ldr	r2, [pc, #252]	; (80002bc <main+0x170>)
 80001be:	4b3f      	ldr	r3, [pc, #252]	; (80002bc <main+0x170>)
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001c6:	6053      	str	r3, [r2, #4]
	 *                    UART Configuration
	 *
	 * *****************************************************/

	/*Enables USART1 clock and port A clock*/
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;
 80001c8:	4a3a      	ldr	r2, [pc, #232]	; (80002b4 <main+0x168>)
 80001ca:	4b3a      	ldr	r3, [pc, #232]	; (80002b4 <main+0x168>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]

	/*Enables the input and output in the bit 9 on port A*/
	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
 80001d8:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <main+0x174>)
 80001da:	4b39      	ldr	r3, [pc, #228]	; (80002c0 <main+0x174>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80001e2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_CNF9_0);
 80001e4:	4a36      	ldr	r2, [pc, #216]	; (80002c0 <main+0x174>)
 80001e6:	4b36      	ldr	r3, [pc, #216]	; (80002c0 <main+0x174>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001ee:	6053      	str	r3, [r2, #4]
	 * Enables UART = Set UE bit
	 * Transmit enable = Set TE bit
	 * Receive enable = Set RE bit
	 * Enables Receive interrupt = Set RXNEIE bit
	 * */
	USART1->CR1 |= USART_CR1_UE | USART_CR1_TE| USART_CR1_RE| USART_CR1_RXNEIE;
 80001f0:	4a34      	ldr	r2, [pc, #208]	; (80002c4 <main+0x178>)
 80001f2:	4b34      	ldr	r3, [pc, #208]	; (80002c4 <main+0x178>)
 80001f4:	899b      	ldrh	r3, [r3, #12]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fc:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000200:	b29b      	uxth	r3, r3
 8000202:	8193      	strh	r3, [r2, #12]

	/*Enables the global interruption to UART in NVIC*/
	NVIC->ISER[1] = NVIC_ISER_SETENA_5;
 8000204:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <main+0x16c>)
 8000206:	2220      	movs	r2, #32
 8000208:	605a      	str	r2, [r3, #4]

	/*Sets the baudrate in 9600 Baudios*/
	USART1->BRR = 0x1D4C;
 800020a:	4b2e      	ldr	r3, [pc, #184]	; (80002c4 <main+0x178>)
 800020c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000210:	811a      	strh	r2, [r3, #8]
	 *
	 *               SPI Configuration
	 *
	 * ******************************************************/

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN ;
 8000212:	4a28      	ldr	r2, [pc, #160]	; (80002b4 <main+0x168>)
 8000214:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <main+0x168>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800021c:	6193      	str	r3, [r2, #24]

	SPI1->CR1 |= SPI_CR1_BR;
 800021e:	4a2a      	ldr	r2, [pc, #168]	; (80002c8 <main+0x17c>)
 8000220:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <main+0x17c>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	b29b      	uxth	r3, r3
 8000226:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800022a:	b29b      	uxth	r3, r3
 800022c:	8013      	strh	r3, [r2, #0]

	SPI1->CR1 |= SPI_CR1_DFF;
 800022e:	4a26      	ldr	r2, [pc, #152]	; (80002c8 <main+0x17c>)
 8000230:	4b25      	ldr	r3, [pc, #148]	; (80002c8 <main+0x17c>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	b29b      	uxth	r3, r3
 8000236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800023a:	b29b      	uxth	r3, r3
 800023c:	8013      	strh	r3, [r2, #0]

	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 800023e:	4a22      	ldr	r2, [pc, #136]	; (80002c8 <main+0x17c>)
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <main+0x17c>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	b29b      	uxth	r3, r3
 8000246:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800024a:	b29b      	uxth	r3, r3
 800024c:	8013      	strh	r3, [r2, #0]

	GPIOA->CRL &= ~(GPIO_CRL_CNF4_0 | GPIO_CRL_CNF5_0 | GPIO_CRL_CNF6_0 | GPIO_CRL_CNF7_0);
 800024e:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <main+0x174>)
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <main+0x174>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f023 4388 	bic.w	r3, r3, #1140850688	; 0x44000000
 8000258:	f423 0388 	bic.w	r3, r3, #4456448	; 0x440000
 800025c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1 | GPIO_CRL_CNF6_1 |GPIO_CRL_CNF5_1 | GPIO_CRL_MODE5 | GPIO_CRL_MODE6 | GPIO_CRL_MODE7 | GPIO_CRL_MODE4;
 800025e:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <main+0x174>)
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <main+0x174>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f043 433b 	orr.w	r3, r3, #3137339392	; 0xbb000000
 8000268:	f443 0333 	orr.w	r3, r3, #11730944	; 0xb30000
 800026c:	6013      	str	r3, [r2, #0]

	GPIOC->CRH &= ~(GPIO_CRH_CNF14_0 | GPIO_CRH_CNF15_0);
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <main+0x170>)
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <main+0x170>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	f023 4388 	bic.w	r3, r3, #1140850688	; 0x44000000
 8000278:	6053      	str	r3, [r2, #4]

	/*Enables the global interruption to SPI1 in NVIC*/
	NVIC->ISER[1] = NVIC_ISER_SETENA_3;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <main+0x16c>)
 800027c:	2208      	movs	r2, #8
 800027e:	605a      	str	r2, [r3, #4]

	//	SPI1->SR &= ~(SPI_SR_TXE);
	SPI1->CR2 |= SPI_CR2_RXNEIE;
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <main+0x17c>)
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x17c>)
 8000284:	889b      	ldrh	r3, [r3, #4]
 8000286:	b29b      	uxth	r3, r3
 8000288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800028c:	b29b      	uxth	r3, r3
 800028e:	8093      	strh	r3, [r2, #4]

	SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <main+0x17c>)
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0x17c>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b29b      	uxth	r3, r3
 8000298:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800029c:	b29b      	uxth	r3, r3
 800029e:	8013      	strh	r3, [r2, #0]

	SPI1->DR = 0;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0x17c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	819a      	strh	r2, [r3, #12]

	GPIOC->BRR |= GPIO_BRR_BR15;
 80002a6:	4a05      	ldr	r2, [pc, #20]	; (80002bc <main+0x170>)
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <main+0x170>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b0:	6153      	str	r3, [r2, #20]

  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <main+0x166>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	e000e100 	.word	0xe000e100
 80002bc:	40011000 	.word	0x40011000
 80002c0:	40010800 	.word	0x40010800
 80002c4:	40013800 	.word	0x40013800
 80002c8:	40013000 	.word	0x40013000

080002cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000304 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80002d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80002d2:	e003      	b.n	80002dc <LoopCopyDataInit>

080002d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80002d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002da:	3104      	adds	r1, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002dc:	480b      	ldr	r0, [pc, #44]	; (800030c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80002e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002e4:	d3f6      	bcc.n	80002d4 <CopyDataInit>
	ldr	r2, =_sbss
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80002e8:	e002      	b.n	80002f0 <LoopFillZerobss>

080002ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80002ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80002ec:	f842 3b04 	str.w	r3, [r2], #4

080002f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80002f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002f4:	d3f9      	bcc.n	80002ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002f6:	f000 f8e9 	bl	80004cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002fa:	f000 f9a1 	bl	8000640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002fe:	f7ff ff25 	bl	800014c <main>
	bx	lr
 8000302:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000304:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000308:	080006a8 	.word	0x080006a8
	ldr	r0, =_sdata
 800030c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000310:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000314:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000318:	20000024 	.word	0x20000024

0800031c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC1_2_IRQHandler>

0800031e <NMI_Handler>:
/**
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void) {
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1) {
 800032e:	e7fe      	b.n	800032e <HardFault_Handler+0x4>

08000330 <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1) {
 8000334:	e7fe      	b.n	8000334 <MemManage_Handler+0x4>

08000336 <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1) {
 800033a:	e7fe      	b.n	800033a <BusFault_Handler+0x4>

0800033c <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1) {
 8000340:	e7fe      	b.n	8000340 <UsageFault_Handler+0x4>

08000342 <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <DebugMon_Handler>:
/**
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void) {
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <USART1_IRQHandler>:
 * @}
 */
uint8_t input = 0xAA;
uint16_t input_s;
uint8_t cont = 0;
void USART1_IRQHandler(void) {
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
//	cont++;
	input = USART1->DR;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <USART1_IRQHandler+0x24>)
 800037a:	889b      	ldrh	r3, [r3, #4]
 800037c:	b29b      	uxth	r3, r3
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <USART1_IRQHandler+0x28>)
 8000382:	701a      	strb	r2, [r3, #0]
//	INPUT = input;
	USART1->DR = input;
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <USART1_IRQHandler+0x24>)
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <USART1_IRQHandler+0x28>)
 8000388:	7812      	ldrb	r2, [r2, #0]
 800038a:	b292      	uxth	r2, r2
 800038c:	809a      	strh	r2, [r3, #4]
//	if (cont <= 1){
//	}
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40013800 	.word	0x40013800
 800039c:	20000000 	.word	0x20000000

080003a0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF);
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ac:	8a1b      	ldrh	r3, [r3, #16]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	f023 0301 	bic.w	r3, r3, #1
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	8213      	strh	r3, [r2, #16]
	GPIOC->ODR ^= (1 << 13);
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <TIM2_IRQHandler+0x2c>)
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <TIM2_IRQHandler+0x2c>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80003c2:	60d3      	str	r3, [r2, #12]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40011000 	.word	0x40011000

080003d0 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void) {
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
//	if(cont > 255) cont = 0;
//	cont++;
	GPIOA->BSRR |= GPIO_BSRR_BS4;
 80003d6:	4a35      	ldr	r2, [pc, #212]	; (80004ac <SPI1_IRQHandler+0xdc>)
 80003d8:	4b34      	ldr	r3, [pc, #208]	; (80004ac <SPI1_IRQHandler+0xdc>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6113      	str	r3, [r2, #16]
	for (int i = 0; i < 800000; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	e002      	b.n	80003ee <SPI1_IRQHandler+0x1e>
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	3301      	adds	r3, #1
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <SPI1_IRQHandler+0xe0>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	ddf8      	ble.n	80003e8 <SPI1_IRQHandler+0x18>
	}
	GPIOA->BRR |= GPIO_BRR_BR4;
 80003f6:	4a2d      	ldr	r2, [pc, #180]	; (80004ac <SPI1_IRQHandler+0xdc>)
 80003f8:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <SPI1_IRQHandler+0xdc>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6153      	str	r3, [r2, #20]
	GPIOC->BSRR |= GPIO_BSRR_BS15;
 8000402:	4a2c      	ldr	r2, [pc, #176]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040c:	6113      	str	r3, [r2, #16]
	for (int i = 0; i < 100000; i++) {
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	e002      	b.n	800041a <SPI1_IRQHandler+0x4a>
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	3301      	adds	r3, #1
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	4a26      	ldr	r2, [pc, #152]	; (80004b8 <SPI1_IRQHandler+0xe8>)
 800041e:	4293      	cmp	r3, r2
 8000420:	ddf8      	ble.n	8000414 <SPI1_IRQHandler+0x44>
	}
	GPIOC->BRR |= GPIO_BRR_BR14;
 8000422:	4a24      	ldr	r2, [pc, #144]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042c:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < 800000; i++) {
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e002      	b.n	800043a <SPI1_IRQHandler+0x6a>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3301      	adds	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <SPI1_IRQHandler+0xe0>)
 800043e:	4293      	cmp	r3, r2
 8000440:	ddf8      	ble.n	8000434 <SPI1_IRQHandler+0x64>
	}
	GPIOC->BSRR |= GPIO_BSRR_BS14;
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800044c:	6113      	str	r3, [r2, #16]
	input_s = SPI1->DR;
 800044e:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <SPI1_IRQHandler+0xec>)
 8000450:	899b      	ldrh	r3, [r3, #12]
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <SPI1_IRQHandler+0xf0>)
 8000456:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (input_s & 0x7FF8) >> 3;
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <SPI1_IRQHandler+0xf0>)
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	10db      	asrs	r3, r3, #3
 800045e:	b29b      	uxth	r3, r3
 8000460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000464:	807b      	strh	r3, [r7, #2]
	temp = temp * 1024 / 4095;
 8000466:	887b      	ldrh	r3, [r7, #2]
 8000468:	029b      	lsls	r3, r3, #10
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <SPI1_IRQHandler+0xf4>)
 800046c:	fb82 1203 	smull	r1, r2, r2, r3
 8000470:	441a      	add	r2, r3
 8000472:	12d2      	asrs	r2, r2, #11
 8000474:	17db      	asrs	r3, r3, #31
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	807b      	strh	r3, [r7, #2]
	USART1->DR = temp;
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <SPI1_IRQHandler+0xf8>)
 800047c:	887b      	ldrh	r3, [r7, #2]
 800047e:	8093      	strh	r3, [r2, #4]
	SPI1->DR = temp;
 8000480:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <SPI1_IRQHandler+0xec>)
 8000482:	887b      	ldrh	r3, [r7, #2]
 8000484:	8193      	strh	r3, [r2, #12]
	while (!(SPI1->SR & SPI_SR_TXE))
 8000486:	bf00      	nop
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <SPI1_IRQHandler+0xec>)
 800048a:	891b      	ldrh	r3, [r3, #8]
 800048c:	b29b      	uxth	r3, r3
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0f8      	beq.n	8000488 <SPI1_IRQHandler+0xb8>
		;
	GPIOC->BRR |= GPIO_BRR_BR15;
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <SPI1_IRQHandler+0xe4>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004a0:	6153      	str	r3, [r2, #20]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40010800 	.word	0x40010800
 80004b0:	000c34ff 	.word	0x000c34ff
 80004b4:	40011000 	.word	0x40011000
 80004b8:	0001869f 	.word	0x0001869f
 80004bc:	40013000 	.word	0x40013000
 80004c0:	20000020 	.word	0x20000020
 80004c4:	80080081 	.word	0x80080081
 80004c8:	40013800 	.word	0x40013800

080004cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <SystemInit+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <SystemInit+0x5c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004dc:	4912      	ldr	r1, [pc, #72]	; (8000528 <SystemInit+0x5c>)
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <SystemInit+0x5c>)
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <SystemInit+0x60>)
 80004e4:	4013      	ands	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004e8:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <SystemInit+0x5c>)
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <SystemInit+0x5c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <SystemInit+0x5c>)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <SystemInit+0x5c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000502:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <SystemInit+0x5c>)
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <SystemInit+0x5c>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800050e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <SystemInit+0x5c>)
 8000512:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000516:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000518:	f000 f80c 	bl	8000534 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <SystemInit+0x64>)
 800051e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000522:	609a      	str	r2, [r3, #8]
#endif 
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	f8ff0000 	.word	0xf8ff0000
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000538:	f000 f802 	bl	8000540 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800054e:	4a3a      	ldr	r2, [pc, #232]	; (8000638 <SetSysClockTo72+0xf8>)
 8000550:	4b39      	ldr	r3, [pc, #228]	; (8000638 <SetSysClockTo72+0xf8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000558:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800055a:	4b37      	ldr	r3, [pc, #220]	; (8000638 <SetSysClockTo72+0xf8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <SetSysClockTo72+0x38>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000576:	d1f0      	bne.n	800055a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000578:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <SetSysClockTo72+0xf8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000584:	2301      	movs	r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	e001      	b.n	800058e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d14b      	bne.n	800062c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000594:	4a29      	ldr	r2, [pc, #164]	; (800063c <SetSysClockTo72+0xfc>)
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <SetSysClockTo72+0xfc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <SetSysClockTo72+0xfc>)
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <SetSysClockTo72+0xfc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f023 0303 	bic.w	r3, r3, #3
 80005aa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80005ac:	4a23      	ldr	r2, [pc, #140]	; (800063c <SetSysClockTo72+0xfc>)
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <SetSysClockTo72+0xfc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80005b8:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <SetSysClockTo72+0xf8>)
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SetSysClockTo72+0xf8>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80005c0:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <SetSysClockTo72+0xf8>)
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <SetSysClockTo72+0xf8>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <SetSysClockTo72+0xf8>)
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <SetSysClockTo72+0xf8>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80005d4:	4a18      	ldr	r2, [pc, #96]	; (8000638 <SetSysClockTo72+0xf8>)
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <SetSysClockTo72+0xf8>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80005de:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80005e0:	4a15      	ldr	r2, [pc, #84]	; (8000638 <SetSysClockTo72+0xf8>)
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <SetSysClockTo72+0xf8>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80005ea:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <SetSysClockTo72+0xf8>)
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <SetSysClockTo72+0xf8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005f8:	bf00      	nop
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <SetSysClockTo72+0xf8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <SetSysClockTo72+0xf8>)
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <SetSysClockTo72+0xf8>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	f023 0303 	bic.w	r3, r3, #3
 8000610:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <SetSysClockTo72+0xf8>)
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <SetSysClockTo72+0xf8>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800061e:	bf00      	nop
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <SetSysClockTo72+0xf8>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f003 030c 	and.w	r3, r3, #12
 8000628:	2b08      	cmp	r3, #8
 800062a:	d1f9      	bne.n	8000620 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40022000 	.word	0x40022000

08000640 <__libc_init_array>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	2500      	movs	r5, #0
 8000644:	4e0c      	ldr	r6, [pc, #48]	; (8000678 <__libc_init_array+0x38>)
 8000646:	4c0d      	ldr	r4, [pc, #52]	; (800067c <__libc_init_array+0x3c>)
 8000648:	1ba4      	subs	r4, r4, r6
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	42a5      	cmp	r5, r4
 800064e:	d109      	bne.n	8000664 <__libc_init_array+0x24>
 8000650:	f000 f81a 	bl	8000688 <_init>
 8000654:	2500      	movs	r5, #0
 8000656:	4e0a      	ldr	r6, [pc, #40]	; (8000680 <__libc_init_array+0x40>)
 8000658:	4c0a      	ldr	r4, [pc, #40]	; (8000684 <__libc_init_array+0x44>)
 800065a:	1ba4      	subs	r4, r4, r6
 800065c:	10a4      	asrs	r4, r4, #2
 800065e:	42a5      	cmp	r5, r4
 8000660:	d105      	bne.n	800066e <__libc_init_array+0x2e>
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000668:	4798      	blx	r3
 800066a:	3501      	adds	r5, #1
 800066c:	e7ee      	b.n	800064c <__libc_init_array+0xc>
 800066e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000672:	4798      	blx	r3
 8000674:	3501      	adds	r5, #1
 8000676:	e7f2      	b.n	800065e <__libc_init_array+0x1e>
 8000678:	080006a0 	.word	0x080006a0
 800067c:	080006a0 	.word	0x080006a0
 8000680:	080006a0 	.word	0x080006a0
 8000684:	080006a4 	.word	0x080006a4

08000688 <_init>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr

08000694 <_fini>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr
