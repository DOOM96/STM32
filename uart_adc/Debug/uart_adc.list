
uart_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800062c  08000634  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800062c  0800062c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000630  08000630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  08000634  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000024  08000634  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010634  2**0
                  CONTENTS, READONLY
  9 .debug_info   000012e4  00000000  00000000  0001065d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000369  00000000  00000000  00011941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000f8  00000000  00000000  00011cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00011da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000758  00000000  00000000  00011e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000588  00000000  00000000  000125c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012b48  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000260  00000000  00000000  00012bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00012e24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000614 	.word	0x08000614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000614 	.word	0x08000614

0800014c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
  	 *                    UART Configuration
  	 *
  	 * *****************************************************/

  	/*Enables USART1 clock and port A clock*/
  	RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;
 8000152:	4a5d      	ldr	r2, [pc, #372]	; (80002c8 <main+0x17c>)
 8000154:	4b5c      	ldr	r3, [pc, #368]	; (80002c8 <main+0x17c>)
 8000156:	699b      	ldr	r3, [r3, #24]
 8000158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800015c:	f043 0304 	orr.w	r3, r3, #4
 8000160:	6193      	str	r3, [r2, #24]

  	/*Enables the input and output in the bit 9 on port A*/
  	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
 8000162:	4a5a      	ldr	r2, [pc, #360]	; (80002cc <main+0x180>)
 8000164:	4b59      	ldr	r3, [pc, #356]	; (80002cc <main+0x180>)
 8000166:	685b      	ldr	r3, [r3, #4]
 8000168:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800016c:	6053      	str	r3, [r2, #4]
  	GPIOA->CRH &= ~(GPIO_CRH_CNF9_0);
 800016e:	4a57      	ldr	r2, [pc, #348]	; (80002cc <main+0x180>)
 8000170:	4b56      	ldr	r3, [pc, #344]	; (80002cc <main+0x180>)
 8000172:	685b      	ldr	r3, [r3, #4]
 8000174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000178:	6053      	str	r3, [r2, #4]
  	/*
  	 * Enables UART = Set UE bit
  	 * Transmit enable = Set TE bit
  	 * Enables Transmission interrupt = Set TXEIE bit
  	 * */
  	USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_TXEIE;
 800017a:	4a55      	ldr	r2, [pc, #340]	; (80002d0 <main+0x184>)
 800017c:	4b54      	ldr	r3, [pc, #336]	; (80002d0 <main+0x184>)
 800017e:	899b      	ldrh	r3, [r3, #12]
 8000180:	b29b      	uxth	r3, r3
 8000182:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	b29b      	uxth	r3, r3
 800018c:	8193      	strh	r3, [r2, #12]

  	/*Enables the global interruption to UART in NVIC*/
  	NVIC->ISER[1] = NVIC_ISER_SETENA_5;
 800018e:	4b51      	ldr	r3, [pc, #324]	; (80002d4 <main+0x188>)
 8000190:	2220      	movs	r2, #32
 8000192:	605a      	str	r2, [r3, #4]

  	/*Sets the baudrate in 9600 Baudios*/
  	USART1->BRR = 0x1D4C;
 8000194:	4b4e      	ldr	r3, [pc, #312]	; (80002d0 <main+0x184>)
 8000196:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800019a:	811a      	strh	r2, [r3, #8]
  	 *
  	 *               ADC Configuration
  	 *
  	 * ****************************************************/
  	/*Enables the clock in the ADC1 and in the port C*/
  	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 800019c:	4a4a      	ldr	r2, [pc, #296]	; (80002c8 <main+0x17c>)
 800019e:	4b4a      	ldr	r3, [pc, #296]	; (80002c8 <main+0x17c>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f443 7304 	orr.w	r3, r3, #528	; 0x210
 80001a6:	f043 0301 	orr.w	r3, r3, #1
 80001aa:	6193      	str	r3, [r2, #24]

  	/*Enables the ADC Global interrupt in the NVIC*/
  	NVIC->ISER[0] = NVIC_ISER_SETENA_18;
 80001ac:	4b49      	ldr	r3, [pc, #292]	; (80002d4 <main+0x188>)
 80001ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80001b2:	601a      	str	r2, [r3, #0]

  	/*Enable the prescaler with a value of 6*/
  	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 80001b4:	4a44      	ldr	r2, [pc, #272]	; (80002c8 <main+0x17c>)
 80001b6:	4b44      	ldr	r3, [pc, #272]	; (80002c8 <main+0x17c>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001be:	6053      	str	r3, [r2, #4]

  	/*Select 1 conversion in the regular group*/
  	ADC1->SQR1 &= ~(ADC_SQR1_L);
 80001c0:	4a45      	ldr	r2, [pc, #276]	; (80002d8 <main+0x18c>)
 80001c2:	4b45      	ldr	r3, [pc, #276]	; (80002d8 <main+0x18c>)
 80001c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  	/*Select first conversion the channel 0*/
  	ADC1->SQR3 &= ~(ADC_SQR3_SQ1);
 80001cc:	4a42      	ldr	r2, [pc, #264]	; (80002d8 <main+0x18c>)
 80001ce:	4b42      	ldr	r3, [pc, #264]	; (80002d8 <main+0x18c>)
 80001d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001d2:	f023 031f 	bic.w	r3, r3, #31
 80001d6:	6353      	str	r3, [r2, #52]	; 0x34

  	/*Configures Channel 0 as Analog input*/
  	GPIOA->CRL &= ~(GPIO_CRL_CNF0);
 80001d8:	4a3c      	ldr	r2, [pc, #240]	; (80002cc <main+0x180>)
 80001da:	4b3c      	ldr	r3, [pc, #240]	; (80002cc <main+0x180>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f023 030c 	bic.w	r3, r3, #12
 80001e2:	6013      	str	r3, [r2, #0]
  	GPIOA->CRL &= ~(GPIO_CRL_MODE0);
 80001e4:	4a39      	ldr	r2, [pc, #228]	; (80002cc <main+0x180>)
 80001e6:	4b39      	ldr	r3, [pc, #228]	; (80002cc <main+0x180>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f023 0303 	bic.w	r3, r3, #3
 80001ee:	6013      	str	r3, [r2, #0]

  	/*Enables the interrupt at the end of conversion*/
  	ADC1->CR1 |= ADC_CR1_EOCIE;
 80001f0:	4a39      	ldr	r2, [pc, #228]	; (80002d8 <main+0x18c>)
 80001f2:	4b39      	ldr	r3, [pc, #228]	; (80002d8 <main+0x18c>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6053      	str	r3, [r2, #4]


  	ADC1->CR2 |= ADC_CR2_ADON;
 80001fc:	4a36      	ldr	r2, [pc, #216]	; (80002d8 <main+0x18c>)
 80001fe:	4b36      	ldr	r3, [pc, #216]	; (80002d8 <main+0x18c>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6093      	str	r3, [r2, #8]
  	for (int i = 0; i < 50; i++)
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e002      	b.n	8000214 <main+0xc8>
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	3301      	adds	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2b31      	cmp	r3, #49	; 0x31
 8000218:	ddf9      	ble.n	800020e <main+0xc2>
  	{}
  	/*Power on the ADC by at least 2 cycles*/
  	ADC1->CR2 |= ADC_CR2_ADON;
 800021a:	4a2f      	ldr	r2, [pc, #188]	; (80002d8 <main+0x18c>)
 800021c:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <main+0x18c>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6093      	str	r3, [r2, #8]
  	for (int i = 0; i < 50; i++){}
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	e002      	b.n	8000232 <main+0xe6>
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	3301      	adds	r3, #1
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	2b31      	cmp	r3, #49	; 0x31
 8000236:	ddf9      	ble.n	800022c <main+0xe0>

  	/*Calibrate the ADC*/
  	ADC1->CR2 |= ADC_CR2_CAL;
 8000238:	4a27      	ldr	r2, [pc, #156]	; (80002d8 <main+0x18c>)
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <main+0x18c>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6093      	str	r3, [r2, #8]
  	for (int i = 0; i < 50; i++){}
 8000244:	2300      	movs	r3, #0
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	e002      	b.n	8000250 <main+0x104>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3301      	adds	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b31      	cmp	r3, #49	; 0x31
 8000254:	ddf9      	ble.n	800024a <main+0xfe>
  	 *                  TIMER2 SETUP
  	 *
  	 * ************************************************************/

  	/*Enables the TIM2*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000256:	4a1c      	ldr	r2, [pc, #112]	; (80002c8 <main+0x17c>)
 8000258:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <main+0x17c>)
 800025a:	69db      	ldr	r3, [r3, #28]
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	61d3      	str	r3, [r2, #28]
	/* Preload value to counter*/
	TIM2->ARR = 0X0FFF;
 8000262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000266:	f640 72ff 	movw	r2, #4095	; 0xfff
 800026a:	859a      	strh	r2, [r3, #44]	; 0x2c
	/*the value to preescaler*/
	TIM2->PSC = 0X0FFF;
 800026c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000270:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000274:	851a      	strh	r2, [r3, #40]	; 0x28
	/*Enables the interrupt when update occurs*/
	TIM2->DIER |= TIM_DIER_UIE;
 8000276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027e:	899b      	ldrh	r3, [r3, #12]
 8000280:	b29b      	uxth	r3, r3
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	b29b      	uxth	r3, r3
 8000288:	8193      	strh	r3, [r2, #12]
	/*Enables interrupt to TIM2*/
	NVIC->ISER[0] = NVIC_ISER_SETENA_28;
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <main+0x188>)
 800028c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000290:	601a      	str	r2, [r3, #0]
	/*Enables counter*/
	TIM2->CR1 |= TIM_CR1_CEN;
 8000292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b29b      	uxth	r3, r3
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	8013      	strh	r3, [r2, #0]
  	/*Pin13 PortC output pull down*/
  	GPIOC->CRH |= GPIO_CRH_MODE13_0;
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <main+0x190>)
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <main+0x190>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	6053      	str	r3, [r2, #4]
  	GPIOC->CRH |= GPIO_CRH_CNF13_0;
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <main+0x190>)
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <main+0x190>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002bc:	6053      	str	r3, [r2, #4]
//
  	USART1->DR = 'I';
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <main+0x184>)
 80002c0:	2249      	movs	r2, #73	; 0x49
 80002c2:	809a      	strh	r2, [r3, #4]

  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
 80002c4:	e7fe      	b.n	80002c4 <main+0x178>
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40013800 	.word	0x40013800
 80002d4:	e000e100 	.word	0xe000e100
 80002d8:	40012400 	.word	0x40012400
 80002dc:	40011000 	.word	0x40011000

080002e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80002e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80002e6:	e003      	b.n	80002f0 <LoopCopyDataInit>

080002e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80002ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002ee:	3104      	adds	r1, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80002f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002f8:	d3f6      	bcc.n	80002e8 <CopyDataInit>
	ldr	r2, =_sbss
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80002fc:	e002      	b.n	8000304 <LoopFillZerobss>

080002fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80002fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000300:	f842 3b04 	str.w	r3, [r2], #4

08000304 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000306:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000308:	d3f9      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800030a:	f000 f8a5 	bl	8000458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030e:	f000 f95d 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000312:	f7ff ff1b 	bl	800014c <main>
	bx	lr
 8000316:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000318:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800031c:	08000634 	.word	0x08000634
	ldr	r0, =_sdata
 8000320:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000324:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000328:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 800032c:	20000024 	.word	0x20000024

08000330 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <CAN1_RX1_IRQHandler>

08000332 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000342:	e7fe      	b.n	8000342 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>

0800034a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800034e:	e7fe      	b.n	800034e <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler+0x4>

08000356 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
	...

0800037c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= (1<<13);
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <SysTick_Handler+0x18>)
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <SysTick_Handler+0x18>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800038a:	60d3      	str	r3, [r2, #12]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40011000 	.word	0x40011000

08000398 <ADC1_2_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_md.s).                                            */
/******************************************************************************/
uint16_t input;
void ADC1_2_IRQHandler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	input = ADC1->DR;
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <ADC1_2_IRQHandler+0x18>)
 800039e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <ADC1_2_IRQHandler+0x1c>)
 80003a4:	801a      	strh	r2, [r3, #0]
//	if(USART1->SR & USART_SR_TXE){
//		USART1->DR = in;
//	}
//	ADC1->CR2 |= ADC_CR2_ADON;
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40012400 	.word	0x40012400
 80003b4:	20000020 	.word	0x20000020

080003b8 <USART1_IRQHandler>:

int cont = 0;
void USART1_IRQHandler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	if (cont == 0){
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <USART1_IRQHandler+0x60>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d109      	bne.n	80003d8 <USART1_IRQHandler+0x20>
		USART1->DR = input;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <USART1_IRQHandler+0x64>)
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <USART1_IRQHandler+0x68>)
 80003c8:	8812      	ldrh	r2, [r2, #0]
 80003ca:	809a      	strh	r2, [r3, #4]
		cont++;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <USART1_IRQHandler+0x60>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a11      	ldr	r2, [pc, #68]	; (8000418 <USART1_IRQHandler+0x60>)
 80003d4:	6013      	str	r3, [r2, #0]
		USART1->DR = (input>>8);
		cont = 0;
		/*Power on the ADC*/
		ADC1->CR2 |= ADC_CR2_ADON;
	}
}
 80003d6:	e01b      	b.n	8000410 <USART1_IRQHandler+0x58>
	} else if (cont == 1){
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <USART1_IRQHandler+0x60>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d108      	bne.n	80003f2 <USART1_IRQHandler+0x3a>
		USART1->DR = '+';
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <USART1_IRQHandler+0x64>)
 80003e2:	222b      	movs	r2, #43	; 0x2b
 80003e4:	809a      	strh	r2, [r3, #4]
		cont++;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <USART1_IRQHandler+0x60>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <USART1_IRQHandler+0x60>)
 80003ee:	6013      	str	r3, [r2, #0]
}
 80003f0:	e00e      	b.n	8000410 <USART1_IRQHandler+0x58>
		USART1->DR = (input>>8);
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <USART1_IRQHandler+0x64>)
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <USART1_IRQHandler+0x68>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	8093      	strh	r3, [r2, #4]
		cont = 0;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <USART1_IRQHandler+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
		ADC1->CR2 |= ADC_CR2_ADON;
 8000404:	4a07      	ldr	r2, [pc, #28]	; (8000424 <USART1_IRQHandler+0x6c>)
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <USART1_IRQHandler+0x6c>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6093      	str	r3, [r2, #8]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	2000001c 	.word	0x2000001c
 800041c:	40013800 	.word	0x40013800
 8000420:	20000020 	.word	0x20000020
 8000424:	40012400 	.word	0x40012400

08000428 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF);
 800042c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000434:	8a1b      	ldrh	r3, [r3, #16]
 8000436:	b29b      	uxth	r3, r3
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	b29b      	uxth	r3, r3
 800043e:	8213      	strh	r3, [r2, #16]
	GPIOC->ODR ^= (1<<13);
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <TIM2_IRQHandler+0x2c>)
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <TIM2_IRQHandler+0x2c>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800044a:	60d3      	str	r3, [r2, #12]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40011000 	.word	0x40011000

08000458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800045c:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <SystemInit+0x5c>)
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <SystemInit+0x5c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000468:	4912      	ldr	r1, [pc, #72]	; (80004b4 <SystemInit+0x5c>)
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <SystemInit+0x5c>)
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <SystemInit+0x60>)
 8000470:	4013      	ands	r3, r2
 8000472:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <SystemInit+0x5c>)
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SystemInit+0x5c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800047e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000482:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <SystemInit+0x5c>)
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <SystemInit+0x5c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000490:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <SystemInit+0x5c>)
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <SystemInit+0x5c>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800049a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <SystemInit+0x5c>)
 800049e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004a2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80004a4:	f000 f80c 	bl	80004c0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <SystemInit+0x64>)
 80004aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	f8ff0000 	.word	0xf8ff0000
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80004c4:	f000 f802 	bl	80004cc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004da:	4a3a      	ldr	r2, [pc, #232]	; (80005c4 <SetSysClockTo72+0xf8>)
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <SetSysClockTo72+0xf8>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004e6:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <SetSysClockTo72+0xf8>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <SetSysClockTo72+0x38>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000502:	d1f0      	bne.n	80004e6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000504:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000510:	2301      	movs	r3, #1
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	e001      	b.n	800051a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d14b      	bne.n	80005b8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <SetSysClockTo72+0xfc>)
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SetSysClockTo72+0xfc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800052c:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <SetSysClockTo72+0xfc>)
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SetSysClockTo72+0xfc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f023 0303 	bic.w	r3, r3, #3
 8000536:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000538:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <SetSysClockTo72+0xfc>)
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <SetSysClockTo72+0xfc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 0302 	orr.w	r3, r3, #2
 8000542:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <SetSysClockTo72+0xf8>)
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000560:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800056a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800056c:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <SetSysClockTo72+0xf8>)
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000576:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <SetSysClockTo72+0xf8>)
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <SetSysClockTo72+0xf8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000584:	bf00      	nop
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <SetSysClockTo72+0xf8>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f023 0303 	bic.w	r3, r3, #3
 800059c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <SetSysClockTo72+0xf8>)
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <SetSysClockTo72+0xf8>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80005aa:	bf00      	nop
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <SetSysClockTo72+0xf8>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f003 030c 	and.w	r3, r3, #12
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	d1f9      	bne.n	80005ac <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40022000 	.word	0x40022000

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	2500      	movs	r5, #0
 80005d0:	4e0c      	ldr	r6, [pc, #48]	; (8000604 <__libc_init_array+0x38>)
 80005d2:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	10a4      	asrs	r4, r4, #2
 80005d8:	42a5      	cmp	r5, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	f000 f81a 	bl	8000614 <_init>
 80005e0:	2500      	movs	r5, #0
 80005e2:	4e0a      	ldr	r6, [pc, #40]	; (800060c <__libc_init_array+0x40>)
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <__libc_init_array+0x44>)
 80005e6:	1ba4      	subs	r4, r4, r6
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	42a5      	cmp	r5, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005f4:	4798      	blx	r3
 80005f6:	3501      	adds	r5, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005fe:	4798      	blx	r3
 8000600:	3501      	adds	r5, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	0800062c 	.word	0x0800062c
 8000608:	0800062c 	.word	0x0800062c
 800060c:	0800062c 	.word	0x0800062c
 8000610:	08000630 	.word	0x08000630

08000614 <_init>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr

08000620 <_fini>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr
